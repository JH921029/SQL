--집합연산자
--UNION - 합집합(중복제거), UNINO ALL - 합집합(중복가능), INTERSECT - 교집합, MITUS - 차집합

SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
UNION
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;


SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
UNION ALL
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;

--교집합
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
INTERSECT
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;

--차집합
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%'
MINUS
SELECT FIRST_NAME, HIRE_DATE FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;

--집합연산자는 컬럼수가 일치해야 합니다.
--컬럼수가 일치한다면, 다양한 형태로 사용이 됩니다.
SELECT '홍길동', TO_CHAR(SYSDATE) FROM DUAL
UNION ALL
SELECT '이순신', '05/01/01' FROM DUAL
UNION ALL
SELECT '홍길자', '10/03/05' FROM DUAL
UNION ALL
SELECT LAST_NAME, TO_CHAR(HIRE_DATE) FROM EMPLOYEES;


--------------------------------------------------------------------------------
--분석함수 - 행에 대한 결과를 출력하는 기능, OVER() 와 햄께 사용됩니다.
SELECT SALARY, 
        RANK() OVER(ORDER BY SALARY DESC) 중복순서,
        DENSE_RANK() OVER(ORDER BY SALARY DESC) 붕복순서X,
        ROW_NUMBER() OVER(ORDER BY SALARY DESC), --데이터의 번호
        COUNT(*) OVER(),--전체 데이터 갯수
        ROWNUM--조회가 일어난 순서 
FROM EMPLOYEES;


